buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.dongliu:apk-parser:2.6.9'
    }
}

apply plugin: 'com.android.application'

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.util.zip.ZipFile
import net.dongliu.apk.parser.*

File debugApk
File keystoreFile
Set debugModules = []
Set installAbis = []
File manifestFile = file('AndroidManifest.xml')
File propFile = file('debug.properties')
File debugStubPropFile = rootProject.file('debug-stub.properties')

def minSdk
def targetSdk

// Load APK, keystore path from properties file.
if (!debugStubPropFile.exists()) {
    throw new GradleScriptException("Cannot find ${debugStubPropFile}".toString())
} else {
    def prop = new Properties()
    debugStubPropFile.withInputStream { prop.load(it) }

    def apkPath = prop.getProperty('apk', null)
    if (apkPath) {
        debugApk = rootProject.file(apkPath)
        if (!debugApk.exists()) {
            throw new GradleScriptException("Debugging APK not exist: ${debugApk}".toString())
        }
    } else throw new GradleScriptException("'apk' property not defined in ${debugStubPropFile}".toString())

    def modules = prop.getProperty('modules', '').trim()
    if (modules) {
        debugModules.addAll modules.split(/\s*,\s*/)
    }

    def keystorePath = prop.getProperty('keystore', null)
    keystoreFile = keystorePath ? rootProject.file(keystorePath) :
            new File("${System.getProperty('user.home')}/.android/debug.keystore")
}

if (Math.min(manifestFile.lastModified(), propFile.lastModified()) <
        Math.max(debugApk.lastModified(), debugStubPropFile.lastModified())) {
    // Find ABIs to be installed
    def zf = new ZipFile(debugApk)
    zf.entries().each {
        def m = (it.name =~ /^lib\/([\w-]+)\//)
        if (m) installAbis << m.group(1)
    }
    if (installAbis.empty) {
        installAbis.addAll ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']
    }

    // Parse AndroidManifest.xml
    def xmlRoot = new XmlSlurper().parseText(new ApkFile(debugApk).manifestXml)
    xmlRoot.declareNamespace(android: 'http://schemas.android.com/apk/res/android')

    // Check the debuggable flag.
    def debuggable = xmlRoot.'application'[0].'@android:debuggable'.toString() as boolean
    if (!debuggable) {
        throw new GradleScriptException('Debugging APK must be debuggable.')
    }

    // Grab and define the min and target SDK level, then delete the <uses-sdk> node.
    def useSdkNode = xmlRoot.'uses-sdk'[0]
    minSdk = useSdkNode.'@android:minSdkVersion'.toString() as Integer
    targetSdk = useSdkNode.'@android:targetSdkVersion'.toString() as Integer

    // Grab package, application, default activity.
    def packageName = xmlRoot.'@package' as String
    def applicationName = xmlRoot.'application'[0].'@android:name' as String
    def defaultActivityName = xmlRoot.'application'[0].activity.find { activity ->
        activity.'intent-filter'.find { filter ->
            filter.action[0].'@android:name' as String == 'android.intent.action.MAIN'
        }
    }.'@android:name' as String

    // Write manifest and properties files.
    Properties prop = new Properties()
    prop.put('minSdk', minSdk as String)
    prop.put('targetSdk', targetSdk as String)
    prop.put('abi', installAbis.join(','))
    propFile.withOutputStream { prop.store(it, '') }

    manifestFile.write """<?xml version="1.0" encoding="utf-8"?>
<!-- ===========================================================
    This file is generated, modifications will be overwritten!
 ============================================================ -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="${packageName}">
    <application android:name="${applicationName}">
        <activity android:name="${defaultActivityName}">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
"""
} else {
    // Load properties from file.
    Properties prop = new Properties()
    propFile.withInputStream { prop.load(it) }
    minSdk = prop.getProperty('minSdk') as Integer
    targetSdk = prop.getProperty('targetSdk') as Integer
    installAbis.addAll prop.getProperty('abi').split(',')
}
assert !installAbis.empty

def getLatestInstalledSdk(File sdkDir) {
    int latestSdk = 0
    new File(sdkDir, 'platforms').eachDir {
        def matcher = it.name =~ /^android-(\d+)$/
        if (matcher) {
            int sdk = matcher.group(1) as int
            if (sdk > latestSdk)
                latestSdk = sdk
        }
    }
    return latestSdk
}

android {
    sourceSets.main.manifest.srcFile 'AndroidManifest.xml'

    // Determine compile SDK version by listing installed SDK.
    compileSdkVersion Math.max(getLatestInstalledSdk(sdkDirectory), targetSdk)

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        ndk { abiFilters = installAbis }
    }
}

// Generate dependencies by debug modules.
rootProject.allprojects.forEach { p ->
    if (p == project || p == rootProject) return
    if (!debugModules.empty && !(p.name in debugModules)) return

    dependencies {
        implementation p
    }
}

// Emit reconstruct task.
afterEvaluate {
    packageDebug.doFirst {
        def outputApk = file("${buildDir}/outputs/apk/debug/${project.name}-debug.apk")
        def originalApk = new File(outputApk.parentFile, 'original.apk')
        if (originalApk.exists()) {
            Files.move(originalApk.toPath(), outputApk.toPath(), StandardCopyOption.REPLACE_EXISTING)
        }
    }
    packageDebug.doLast {
        def outputApk = file("${buildDir}/outputs/apk/debug/${project.name}-debug.apk")
        def tmpFile = new File(outputApk.parentFile, 'reconstruct.apk')
        def originalApk = new File(outputApk.parentFile, 'original.apk')
        def sdkDir = android.sdkDirectory
        def buildToolsVersion = android.buildToolsVersion

        try {
            Files.copy(debugApk.toPath(), tmpFile.toPath(), StandardCopyOption.REPLACE_EXISTING)
            def outFS = null, inFS = null
            try {
                // Open input and output APK as ZipFileSystem
                outFS = FileSystems.newFileSystem(URI.create("jar:${tmpFile.toURI()}"),
                        ['useTempFile': 'true'])
                inFS = FileSystems.newFileSystem(URI.create("jar:${outputApk.toURI()}"), [:])

                // Remove signatures
                Files.walk(outFS.getPath('/META-INF'))
                        .sorted(Comparator.reverseOrder()).forEach { Files.delete(it) }

                // Replace so files
                def outLibDir = outFS.getPath('/lib')
                def inLibDir = inFS.getPath('/lib')
                Files.createDirectories(outLibDir)
                Files.walk(inLibDir).sorted().forEach {
                    def outPath = outLibDir.resolve(inLibDir.relativize(it))
                    if (Files.isDirectory(it)) {
                        Files.createDirectories(outPath)
                    } else {
                        Files.copy(it, outPath, StandardCopyOption.REPLACE_EXISTING)
                    }
                }
            } finally {
                outFS?.close()
                inFS?.close()
            }

            // Sign the resulting APK
            def proc = ["${sdkDir}/build-tools/${buildToolsVersion}/apksigner", 'sign', '--ks',
                        keystoreFile.absolutePath, '--ks-pass', 'pass:android', "${tmpFile}"]
                    .execute(null, file('.'))
            proc.consumeProcessOutput(System.out, System.err)
            def ret = proc.waitFor()
            if (ret != 0)
                throw new GradleScriptException("apksigner returned with status: $ret")

            // Move the resulting APK to replace the original output
            Files.move(outputApk.toPath(), originalApk.toPath(), StandardCopyOption.REPLACE_EXISTING)
            Files.move(tmpFile.toPath(), outputApk.toPath(), StandardCopyOption.REPLACE_EXISTING)
        } catch (e) {
            tmpFile.delete()
            throw e
        }
    }
}
