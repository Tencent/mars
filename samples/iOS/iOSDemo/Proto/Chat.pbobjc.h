// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum SendMessageResponse_Error

typedef GPB_ENUM(SendMessageResponse_Error) {
  SendMessageResponse_Error_ErrOk = 0,
  SendMessageResponse_Error_ErrSys = -1,
};

GPBEnumDescriptor *SendMessageResponse_Error_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL SendMessageResponse_Error_IsValidValue(int32_t value);

#pragma mark - ChatRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ChatRoot : GPBRootObject
@end

#pragma mark - SendMessageRequest

typedef GPB_ENUM(SendMessageRequest_FieldNumber) {
  SendMessageRequest_FieldNumber_AccessToken = 1,
  SendMessageRequest_FieldNumber_From = 2,
  SendMessageRequest_FieldNumber_To = 3,
  SendMessageRequest_FieldNumber_Text = 4,
  SendMessageRequest_FieldNumber_Topic = 5,
};

@interface SendMessageRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *accessToken;
/** Test to see if @c accessToken has been set. */
@property(nonatomic, readwrite) BOOL hasAccessToken;

@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;

@property(nonatomic, readwrite, copy, null_resettable) NSString *to;
/** Test to see if @c to has been set. */
@property(nonatomic, readwrite) BOOL hasTo;

@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@property(nonatomic, readwrite, copy, null_resettable) NSString *topic;
/** Test to see if @c topic has been set. */
@property(nonatomic, readwrite) BOOL hasTopic;

@end

#pragma mark - SendMessageResponse

typedef GPB_ENUM(SendMessageResponse_FieldNumber) {
  SendMessageResponse_FieldNumber_ErrCode = 1,
  SendMessageResponse_FieldNumber_ErrMsg = 2,
  SendMessageResponse_FieldNumber_From = 3,
  SendMessageResponse_FieldNumber_Text = 4,
  SendMessageResponse_FieldNumber_Topic = 5,
};

@interface SendMessageResponse : GPBMessage

@property(nonatomic, readwrite) int32_t errCode;

@property(nonatomic, readwrite) BOOL hasErrCode;
@property(nonatomic, readwrite, copy, null_resettable) NSString *errMsg;
/** Test to see if @c errMsg has been set. */
@property(nonatomic, readwrite) BOOL hasErrMsg;

@property(nonatomic, readwrite, copy, null_resettable) NSString *from;
/** Test to see if @c from has been set. */
@property(nonatomic, readwrite) BOOL hasFrom;

@property(nonatomic, readwrite, copy, null_resettable) NSString *text;
/** Test to see if @c text has been set. */
@property(nonatomic, readwrite) BOOL hasText;

@property(nonatomic, readwrite, copy, null_resettable) NSString *topic;
/** Test to see if @c topic has been set. */
@property(nonatomic, readwrite) BOOL hasTopic;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
